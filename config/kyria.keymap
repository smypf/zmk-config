#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <13 14 15 16 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 30 31 40 41 42 43 44>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <19 20 21 22 6 7 8 9 10 11 18 19 20 21 22 23 32 33 34 35 36 37 38 39 45 46 47 48 49>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp BACKSLASH   &kp Q               &kp W             &kp F             &kp P           &kp B                                                  &kp J     &kp Y            &kp U            &kp K              &kp SEMI             &kp EQUAL
&kp ESC         &mt LEFT_CONTROL A  &mt LEFT_SHIFT R  &mt LEFT_ALT S    &mt LEFT_GUI T  &kp G                                                  &kp L     &mt RIGHT_GUI H  &mt RIGHT_ALT E  &mt RIGHT_SHIFT I  &mt RIGHT_CONTROL O  &kp SQT
&kp LEFT_SHIFT  &kp Z               &kp X             &kp C             &kp D           &kp V    &kp F1     &kp F2   &kp F8       &kp F12      &kp M     &kp N            &kp COMMA        &kp DOT            &kp FSLH             &kp MINUS
                                                      &kp K_PLAY_PAUSE  &kp BSPC        &kp TAB  &kp SPACE  &kp RET  &lt 2 ENTER  &lt 1 SPACE  &kp BSPC  &kp DEL          &kp K_MUTE
            >;

            sensor-bindings =
                <&inc_dec_kp K_NEXT K_PREVIOUS>,
                <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>;
        };

        layer_1 {
            bindings = <
&trans     &kp COLON  &kp N7  &kp N8  &kp N9    &kp EQUAL                                     &trans    &trans    &trans  &trans     &trans  &trans
&trans     &kp LBKT   &kp N4  &kp N5  &kp N6    &kp RBKT                                      &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&kp EQUAL  &kp GRAVE  &kp N1  &kp N2  &kp N3    &kp BSLH   &trans  &trans     &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
                              &trans  &kp BSPC  &kp DOT    &kp N0  &kp SPACE  &trans  &trans  &trans    &trans    &trans
            >;
        };

        layer_2 {
            bindings = <
&trans    &kp LS(COLON)  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(PLUS)                                         &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&kp CAPS  &kp LS(LBRC)   &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(RBRC)                                         &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans    &kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)  &trans        &trans   &trans  &trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
                                       &trans         &kp BSPC       &kp LS(LPAR)  &kp LS(RPAR)  &kp RET  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
